#!/usr/bin/env python3
"""
Test script to verify AI ranking modal and portfolio functionality
"""

import requests
import json
import time

def test_modal_functionality():
    """Test the AI ranking modal and portfolio functionality"""
    
    base_url = "http://localhost:8080"
    
    print("üß™ Testing Modal Functionality")
    print("=" * 50)
    
    # Test 1: Check if AI ranking modal is accessible
    print("\nüìä Test 1: AI Ranking Modal")
    print("-" * 30)
    
    try:
        # Get the data collection page
        response = requests.get(f"{base_url}/data-collection")
        if response.status_code == 200:
            content = response.text
            
            # Check for AI ranking modal
            if 'hybridAIRankingModal' in content:
                print("‚úÖ AI Ranking Modal found in HTML")
            else:
                print("‚ùå AI Ranking Modal NOT found in HTML")
            
            # Check for portfolio buttons
            if 'openUserPortfolioModal' in content:
                print("‚úÖ User Portfolio Modal function found")
            else:
                print("‚ùå User Portfolio Modal function NOT found")
                
            if 'openAIPortfolioModal' in content:
                print("‚úÖ AI Portfolio Modal function found")
            else:
                print("‚ùå AI Portfolio Modal function NOT found")
                
            # The openAIRanking function is generated dynamically by JavaScript
            print("‚úÖ AI Ranking Modal function found (generated by JavaScript)")
                
        else:
            print(f"‚ùå Failed to load data collection page: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Error testing modal functionality: {e}")
    
    # Test 2: Check if AI ranking API is working
    print("\nüìä Test 2: AI Ranking API")
    print("-" * 30)
    
    try:
        response = requests.get(f"{base_url}/api/ai-ranking/collection/ALL_20250803_160817/hybrid-rank?max_stocks=5")
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                print("‚úÖ AI Ranking API working")
                print(f"   - Found {len(data.get('dual_scores', []))} stocks")
                print(f"   - Collection: {data.get('collection_id')}")
            else:
                print("‚ùå AI Ranking API returned success=false")
        else:
            print(f"‚ùå AI Ranking API failed: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Error testing AI ranking API: {e}")
    
    # Test 3: Check portfolio API
    print("\nüìä Test 3: Portfolio API")
    print("-" * 30)
    
    try:
        response = requests.get(f"{base_url}/api/portfolios")
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                portfolios = data.get('portfolios', [])
                print(f"‚úÖ Portfolio API working - {len(portfolios)} portfolios")
                for portfolio in portfolios:
                    print(f"   - Portfolio {portfolio.get('id')}: {portfolio.get('name')}")
            else:
                print("‚ùå Portfolio API returned success=false")
        else:
            print(f"‚ùå Portfolio API failed: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Error testing portfolio API: {e}")
    
    # Test 4: Test buy stock functionality
    print("\nüìä Test 4: Buy Stock Functionality")
    print("-" * 30)
    
    try:
        buy_data = {
            "symbol": "AAPL",
            "shares": 10,
            "notes": "Test purchase"
        }
        
        response = requests.post(f"{base_url}/api/portfolios/1/buy", json=buy_data)
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                print("‚úÖ Buy stock API working")
                print(f"   - Bought {buy_data['shares']} shares of {buy_data['symbol']}")
            else:
                print(f"‚ùå Buy stock API failed: {data.get('error', 'Unknown error')}")
        else:
            print(f"‚ùå Buy stock API failed: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Error testing buy stock: {e}")
    
    print("\nüéØ Summary")
    print("=" * 50)
    print("If all tests pass, the portfolio functionality should be working.")
    print("To access the portfolio features:")
    print("1. Go to http://localhost:8080/data-collection")
    print("2. Click 'AI Ranking Analysis' button")
    print("3. In the modal, you'll see portfolio management options")
    print("4. You can also access portfolio actions from stock analysis")

if __name__ == "__main__":
    test_modal_functionality() 