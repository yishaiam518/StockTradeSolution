#!/usr/bin/env python3
"""
Test script to verify frontend AI ranking display
"""

import requests
import json
from datetime import datetime

def test_frontend_ai_ranking():
    """Test frontend AI ranking display"""
    
    base_url = "http://localhost:8080"
    
    print("ü§ñ Testing Frontend AI Ranking Display")
    print("=" * 50)
    
    try:
        # Test 1: Check collections API
        print("=== TEST 1: Collections API ===")
        response = requests.get(f"{base_url}/api/data-collection/collections")
        data = response.json()
        
        if data.get('success'):
            collections = data.get('collections', [])
            print(f"‚úÖ Found {len(collections)} collections")
            
            # Check each collection for AI ranking data
            for collection in collections:
                collection_id = collection.get('collection_id')
                ai_ranking = collection.get('ai_ranking_last_update')
                print(f"üìä {collection_id}: AI Ranking = {ai_ranking or 'Not set'}")
        else:
            print("‚ùå Collections API returned error")
        
        # Test 2: Check scheduler status for each collection
        print("\n=== TEST 2: Scheduler Status ===")
        for collection in collections:
            collection_id = collection.get('collection_id')
            response = requests.get(f"{base_url}/api/data-collection/collections/{collection_id}/scheduler/status")
            scheduler_data = response.json()
            
            if scheduler_data.get('success'):
                ai_ranking = scheduler_data.get('ai_ranking_last_update_formatted')
                print(f"üìä {collection_id}: Scheduler AI Ranking = {ai_ranking or 'Never'}")
            else:
                print(f"‚ùå {collection_id}: Scheduler status error")
        
        # Test 3: Check if the frontend JavaScript is being served correctly
        print("\n=== TEST 3: Frontend JavaScript ===")
        response = requests.get(f"{base_url}/static/js/data_collection.js?v=12")
        if response.status_code == 200:
            js_content = response.text
            print("‚úÖ JavaScript file is accessible")
            
            # Check for key functions
            if "loadCollectionSchedulerStatus" in js_content:
                print("‚úÖ loadCollectionSchedulerStatus function found")
            else:
                print("‚ùå loadCollectionSchedulerStatus function not found")
            
            if "ai-ranking-last-update" in js_content:
                print("‚úÖ AI ranking element ID found in JavaScript")
            else:
                print("‚ùå AI ranking element ID not found in JavaScript")
            
            if "ai_ranking_last_update" in js_content:
                print("‚úÖ AI ranking data binding found in JavaScript")
            else:
                print("‚ùå AI ranking data binding not found in JavaScript")
        else:
            print(f"‚ùå JavaScript file returned status {response.status_code}")
        
        # Test 4: Check HTML template
        print("\n=== TEST 4: HTML Template ===")
        response = requests.get(f"{base_url}/data-collection")
        if response.status_code == 200:
            html_content = response.text
            print("‚úÖ Data collection page is accessible")
            
            # Check for JavaScript inclusion
            if "data_collection.js?v=12" in html_content:
                print("‚úÖ Updated JavaScript file is included")
            else:
                print("‚ùå Updated JavaScript file is not included")
            
            # Check for key elements
            if "collectionsList" in html_content:
                print("‚úÖ Collections container found")
            else:
                print("‚ùå Collections container not found")
            
            if "DataCollectionManager" in html_content:
                print("‚úÖ DataCollectionManager class found")
            else:
                print("‚ùå DataCollectionManager class not found")
        else:
            print(f"‚ùå Data collection page returned status {response.status_code}")
        
        # Test 5: Simulate frontend behavior
        print("\n=== TEST 5: Frontend Simulation ===")
        print("üîç The issue might be that collections are loaded dynamically via JavaScript")
        print("üîç The HTML structure is generated by JavaScript, not in the template")
        print("üîç The AI ranking display should update when:")
        print("   - Page loads (loadCollections() -> displayCollections() -> loadCollectionSchedulerStatus())")
        print("   - Auto-refresh every 30 seconds")
        print("   - Manual refresh")
        
        print("\nüìã To test the frontend manually:")
        print("1. Open http://localhost:8080/data-collection in a browser")
        print("2. Open browser developer tools (F12)")
        print("3. Check the Console tab for any JavaScript errors")
        print("4. Check the Network tab to see if API calls are being made")
        print("5. Look for calls to /api/data-collection/collections/{id}/scheduler/status")
        
        print("\n" + "=" * 50)
        print("üéâ Frontend AI Ranking Test Complete!")
        
    except Exception as e:
        print(f"‚ùå Test failed with error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_frontend_ai_ranking() 